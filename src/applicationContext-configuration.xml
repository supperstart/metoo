<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:cache="http://www.springframework.org/schema/cache" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="http://www.springframework.org/schema/aop 
	http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
		http://www.springframework.org/schema/mvc 
		http://www.springframework.org/schema/mvc/spring-mvc-3.1.xsd
		http://www.springframework.org/schema/beans 
		http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
		http://www.springframework.org/schema/cache 
		http://www.springframework.org/schema/cache/spring-cache.xsd
		http://www.springframework.org/schema/tx 
		http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
		http://www.springframework.org/schema/context 
		http://www.springframework.org/schema/context/spring-context-3.0.xsd">

	<!-- 启用支持Annotation注解方式的事务管理 -->
	<tx:annotation-driven transaction-manager="transactionManager" />

	<!-- 把标记了@Controller等注解的类转换为bean 接口的位置， -->
	<context:component-scan base-package="com.metoo" />

	<!--注解驱动，以使得访问路径与方法的匹配可以通过注解配置 -->
<!-- 	<mvc:annotation-driven /> -->

	<!--拦截器 -->
	<mvc:interceptors>
		<!-- 微信端自动进入登陆状态拦截器 -->
		<!--<mvc:interceptor> <mvc:mapping path="/wap/goods.htm" /> <bean class="com.metoo.module.weixin.interceptor.LoginInterceptor"></bean> 
			</mvc:interceptor> -->
		<!-- 拦截非法请求向微信接口发送消息 -->
		<mvc:interceptor>
			<mvc:mapping path="/weixin_develop_action.htm" />
			<bean class="com.metoo.module.weixin.interceptor.WeixinInterceptor"></bean>
		</mvc:interceptor>
		<!-- app买家拦截器 -->
		<mvc:interceptor>
			<mvc:mapping path="/app/buyer/*.htm" />  <!--要拦截的方法 -->
			<bean class="com.metoo.module.app.view.tools.AppBuyerInterceptor"></bean><!--配置拦截器对象 -->
		</mvc:interceptor>
	</mvc:interceptors>

	<!-- 启动Spring MVC的注解功能，完成请求和注解POJO的映射 <bean class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter" 
		/> -->
	<!--文件上传设置 -->
	<!-- id为固定的，只能为multipartResolver 作用：将客户端上传的file对象转换成MultipartFile对象， 设置文件解析的编码一定要与页面编码保持一致pageEncoding 
		xml的属性是纯文本，不能写运算符，属性 -->
	<bean id="multipartResolver"
		class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<property name="maxUploadSize">
			<value>10485760</value><!-- 文件上传最大为10M -->
		</property>
		<property name="maxInMemorySize" value="4096" />
	</bean>

	<!-- 对模型视图名称的解析，即在模型视图名称添加前后缀 -->
	<bean id="velocityCongfig"
		class="org.springframework.web.servlet.view.velocity.VelocityConfigurer">
		<property name="resourceLoaderPath">
			<value>/</value>
		</property>
		<property name="velocityProperties">
			<props>
				<prop key="input.encoding">UTF-8</prop>
				<prop key="output.encoding ">UTF-8</prop>
			</props>
		</property>
	</bean>
	
	<bean id="viewResolver"
		class="org.springframework.web.servlet.view.velocity.VelocityViewResolver">
		<property name="viewClass"
			value="org.springframework.web.servlet.view.velocity.VelocityView" />
		<property name="contentType">
			<value>text/html;charset=UTF-8</value>
		</property>
		<property name="toolboxConfigLocation" value="/WEB-INF/velocity/toolbox.xml" />
	</bean>
	
	<!-- property-placeholder是一个属性遍历器，定位一个属性文件，属性文件存放的是jdbc一些连接数据 -->
	<context:property-placeholder location="classpath:jdbc.properties" />
	<!-- 配置数据源 com.mchange.v2.c3p0.ComboPooledDataSource -->
	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource"
		destroy-method="close">
		<property name="driverClassName" value="${driverClassName}" />
		<property name="url" value="${url}" />
		<property name="username" value="${username}" />
		<property name="password" value="${password}" />
		<property name="initialSize" value="${initialSize}" />
		<property name="maxActive" value="${maxActive}" />
		<property name="maxIdle" value="${maxIdle}" />
		<property name="minIdle" value="${minIdle}" />
	</bean>

	<!-- 实体管理器bean spring整合jpa(persistence所有内容由spring管理) -->
	<bean name="entityManagerFactory"
		class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
		<property name="persistenceXmlLocation" value="classpath:persistence.xml" />
		<!-- 注入spring数据源 -->
		<property name="dataSource" ref="dataSource" />
		<!-- 指定jpa的实现产品配置 -->
		<property name="jpaVendorAdapter">
			<bean class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter">
				<!-- 相关ORM产品的基本属性配置 -->
				<property name="database" value="MYSQL" />
				<property name="showSql" value="false" />
				<property name="generateDdl" value="true" />
			</bean>
		</property>
		<property name="jpaProperties">
			<props>
				<!-- 二级缓存配置 -->
				<prop key="hibernate.cache.provider_class">net.sf.ehcache.hibernate.SingletonEhCacheProvider
				</prop>
				<prop key="hibernate.cache.use_query_cache">true</prop>
				<prop key="hibernate.cache.use_second_level_cache">true</prop>
				<prop key="hibernate.use_sql_comments">false</prop>
				<prop key="hibernate.format_sql">false</prop>
				<prop key="hibernate.generate_statistics">true</prop>
				<prop key="hibernate.cache.region.factory_class">net.sf.ehcache.hibernate.EhCacheRegionFactory</prop>
			</props>
		</property>
		<!-- 配置该been 可以不限制jpa配置文件的位置和名称 指定要扫描的持久化类的包名 -->
		<property name="packagesToScan">
			<list>
				<value>com.metoo</value>
			</list>
		</property>
	</bean>

	<!-- 配置spring事务 jdbc  -->
	<!-- <bean id="transactionManager" class="org.springframwork.jdbc.datasource.DataSorceTransaction" 
		></bean> -->
	<!-- 配置事务管理器 JPA事务 -->
	<bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager">
		<property name="entityManagerFactory" ref="entityManagerFactory" />
		<!-- 注入数据源 -->
		<property name="dataSource" ref="dataSource" />
	</bean>

	<!-- 定义了与实体相关的dao -->
	<bean id="genericEntityDao" class="com.metoo.core.base.GenericEntityDao"
		scope="singleton" lazy-init="false">
		<property name="entityManagerFactory" ref="entityManagerFactory" />
	</bean>

	<!--使用泛型DAO作为抽象基类 abstract="true" -->
	<bean id="genericDAO" class="com.metoo.core.base.GenericDAO"
		abstract="true" depends-on="genericEntityDao">
		<property name="geDao">
			<ref bean="genericEntityDao" />
		</property>
	</bean>
	<!-- sysconfig service -->
	<bean id="configService" class="com.metoo.foundation.service.impl.SysConfigService"
		scope="singleton">
	</bean>

	<!-- 系统调度控制器 加入定时执行的方法 -->
	<bean id="statTask"
		class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
		<property name="targetObject" ref="shop_stat" />
		<property name="targetMethod" value="execute" />
		<property name="concurrent" value="false" />
	</bean>
	<bean id="jobTask"
		class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
		<property name="targetObject" ref="shop_job" />
		<property name="targetMethod" value="execute" />
		<property name="concurrent" value="false" />
	</bean>

	<!-- access_token 缓存 -->
	<bean id="weixinTask"
		class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
		<!-- 调用的类 -->
		<property name="targetObject" ref="weixin_job" />
		<!-- 调用类中的方法 -->
		<property name="targetMethod" value="execute" />
		<property name="concurrent" value="false" />
	</bean>
	<bean id="orderTask"
		class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
		<property name="targetObject" ref="order_job" />
		<property name="targetMethod" value="execute" />
		<property name="concurrent" value="false" />
	</bean>

	<!-- 调度触发器，指定被调度方法的执行时间 -->
	<bean id="stat_cronTrigger" class="org.springframework.scheduling.quartz.CronTriggerBean">
		<property name="jobDetail" ref="statTask" />
		<property name="cronExpression" value="0 0 1 * * ?" />
	</bean>
	<bean id="job_cronTrigger" class="org.springframework.scheduling.quartz.CronTriggerBean">
		<property name="jobDetail" ref="jobTask" />
		<property name="cronExpression" value="0 0 1 * * ?" />
	</bean>
	<bean id="weixin_cronTrigger" class="org.springframework.scheduling.quartz.CronTriggerBean">
		<property name="jobDetail" ref="weixinTask" />
		<property name="cronExpression" value="0 0 1 * * ?" />
	</bean>
	<bean id="order_cronTrigger" class="org.springframework.scheduling.quartz.CronTriggerBean">
		<property name="jobDetail" ref="orderTask" />
		<property name="cronExpression" value="0 0 1 * * ?" />
	</bean>
	

	<!-- 调度工厂 ,调度触发器 -->
	<bean id="schdulerFactory" lazy-init="false"
		class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
		<property name="triggers">
			<list>
				<ref bean="order_cronTrigger" />
				<ref bean="stat_cronTrigger" />
				<ref bean="job_cronTrigger" />
				<ref bean="weixin_cronTrigger" />
			</list>
		</property>
	</bean>
	
	
	<bean id="mailSender" class="org.springframework.mail.javamail.JavaMailSenderImpl">
        <property name="host" value="smtp.mxhichina.com"/>
        <property name="username" value="service@soarmall.com"/>
        <property name="password" value="Metoo89745000!"/>
    </bean>
    
    <bean id="sendEmailService" class="com.metoo.msg.email.SendEmailService">
        <property name="sender" ref="mailSender"/>
        <property name="velocityEngine" ref="velocityEngine"/>
    </bean>
    
    <bean id="velocityEngine" class="org.springframework.ui.velocity.VelocityEngineFactoryBean">
        <property name="velocityProperties">
            <props>
                <prop key="resource.loader">class</prop>
                <prop key="class.resource.loader.class">
                    org.apache.velocity.runtime.resource.loader.ClasspathResourceLoader
                </prop>
                <!-- 配置引擎读取数据的编码格式 -->
                <prop key="input.encoding">UTF-8</prop>
                <!-- 配置引擎输出数据的编码格式 -->
                <prop key="output.encoding">UTF-8</prop>
                <prop key="default.contentType">application/x-www-form-urlencoded; charset=UTF-8</prop>
            </props>
        </property>
        <property name="resourceLoaderPath" value="/velocity/"></property>
    </bean>
	
</beans>